//* global variable declarations
int memo;

void void_func_with_no_args(){
    int a;
    disp << "Called void_func_with_no_args\n";
}

void void_func_with_args(int a){
    disp << "Called void_func_with_args(";
    disp << a;
    disp << ")\n";
}

int sum(int a, int b){
    int c;
    c = a + b;
    return c;
}

int mult(int a, int b){
    int c;
    c = 0;
    while(a > 0){
        c = sum(c, b);
        a--;
    }
    return c;
}

bool and(bool m, bool n){
    return m && n;
}

bool or(bool m, bool n){
    return m || n;
}

int fib_recurison(int n){
    if(n <= 2){
        return 1;
    }
    return fib_recurison(n - 2) + fib_recurison(n - 1);
}

int fib_dp(int n){
    int curr;
    int tmp;
    memo = 0;
    curr = 1;
    while(n > 1){
        tmp = curr;
        curr = memo + curr;
        memo = tmp;
        n--;
    }
    return curr;
}

void main() {
    //* int and bool literal declarations
    int k;
    int j;
    bool m;
    bool n;

    //* assignment: id = literal
    k = 5;
    j = -5;
    m = true;
    n = false;

    //* assignment: id = id
    k = -j;
    j = -k;
    m = !n;
    n = !m;

    //* void function calls
    void_func_with_no_args(); //* Reach void_func_with_no_args
    void_func_with_args(k);  //* Reach void_func_with_args 5
    void_func_with_args(k + j);  //* Reach void_func_with_args 0
    void_func_with_args(-1);  //* Reach void_func_with_args -1

    //* function returns
    disp << "sum(5, 5): ";
    disp << k;
    disp << " + ";
    disp << j;
    disp << " = "; 
    disp << sum(k, j);
    disp << "\n";

    //* loop
    disp << "mult(5, -5): ";
    disp << mult(k, j);  //* -25 = -25
    disp << " = ";
    disp << k * j;
    disp << "\n";

    //* condition
    if(!and(m, n) == or(!m, !n)){
        disp << "de morgan's law passed!\n";
    } else{
        disp << "de morgan's law failed!\n";
    }

    //* recursion
    disp << "fib_recurison(10) = ";
    disp << fib_recurison(10);
    disp << "\n";

    //* dynamic programming using the global memo variable
    disp << "fib_dp(10) = ";
    disp << fib_dp(10);
    disp << "\n";

    //* edge cases
    //* string comparison
    if(and("string" == "string", "str" != "string")){
        disp << "string comparison passed!\n";
    } else{
        disp << "string comparison failed!\n";
    }
    //* short circuit
    if(!(false && fib_recurison(100000000) == -1)){
        if(true || fib_recurison(100000000) == -1){
            disp << "short circuit passed!\n";
        }
    }
    //* output boolean
    disp << "true, false = ";
    disp << m;
    disp << ", ";
    disp << n;
    disp << "\n";
    //* input boolean
    disp << "Please enter \"1\": ";
    input >> m;
    disp << "Please enter \"0\": ";
    input >> n;
    if(m && !n){
        disp << "input bool test passed!\n";
    }
    disp << "Please enter \"5\": ";
    input >> k;
    disp << "Please enter \"-5\": ";
    input >> j;
    if(k == 5 && j == -5){
        disp << "input int test passed!\n";
    }
    disp << "ALL TESTS PASSED!\n";
}
