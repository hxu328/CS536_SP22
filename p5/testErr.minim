//* test expressions
void e(int x){}
void test_expression(int x){
    e((999 && 999) && 999);
    e((999 || 999) && 999);
    e((999 && 999) || 999);
    e((999 || 999) || 999);
    e((true < true) && 999);
    e((true > true) && 999);
    e((true <= true) && 999);
    e((true >= true) && 999);
    e((true < true) || 999);
    e((true > true) || 999);
    e((true <= true) || 999);
    e((true >= true) || 999);
    e((true + true) && 999);
    e((true - true) && 999);
    e((true * true) && 999);
    e((true / true) && 999);
    e((true + true) || 999);
    e((true - true) || 999);
    e((true * true) || 999);
    e((true / true) || 999);
    e((999 == "string") && 999);
    e((true != 999) && 999);
    e(("string" == true) || 999);
    e((999 != "string") || 999);
    e((999 && 999) < true);
    e((999 || 999) < true);
    e((999 && 999) > true);
    e((999 || 999) > true);
    e((999 && 999) <= true);
    e((999 || 999) <= true);
    e((999 && 999) >= true);
    e((999 || 999) >= true);
    e((true < true) < true);
    e((true > true) < true);
    e((true <= true) < true);
    e((true >= true) < true);
    e((true < true) > true);
    e((true > true) > true);
    e((true <= true) > true);
    e((true >= true) > true);
    e((true < true) <= true);
    e((true > true) <= true);
    e((true <= true) <= true);
    e((true >= true) <= true);
    e((true < true) >= true);
    e((true > true) >= true);
    e((true <= true) >= true);
    e((true >= true) >= true);
    e((true + true) < true);
    e((true - true) < true);
    e((true * true) < true);
    e((true / true) < true);
    e((true + true) > true);
    e((true - true) > true);
    e((true * true) > true);
    e((true / true) > true);
    e((true + true) <= true);
    e((true - true) <= true);
    e((true * true) <= true);
    e((true / true) <= true);
    e((true + true) >= true);
    e((true - true) >= true);
    e((true * true) >= true);
    e((true / true) >= true);
    e((true == 999) < true);
    e(("string" != true) < true);
    e((999 == "string") > true);
    e((true != 999) > true);
    e(("string" == true) <= true);
    e((999 != "string") <= true);
    e((true == 999) >= true);
    e(("string" != true) >= true);
    e((999 && 999) + true);
    e((999 || 999) + true);
    e((999 && 999) - true);
    e((999 || 999) - true);
    e((999 && 999) * true);
    e((999 || 999) * true);
    e((999 && 999) / true);
    e((999 || 999) / true);
    e((true < true) + true);
    e((true > true) + true);
    e((true <= true) + true);
    e((true >= true) + true);
    e((true < true) - true);
    e((true > true) - true);
    e((true <= true) - true);
    e((true >= true) - true);
    e((true < true) * true);
    e((true > true) * true);
    e((true <= true) * true);
    e((true >= true) * true);
    e((true < true) / true);
    e((true > true) / true);
    e((true <= true) / true);
    e((true >= true) / true);
    e((true + true) + true);
    e((true - true) + true);
    e((true * true) + true);
    e((true / true) + true);
    e((true + true) - true);
    e((true - true) - true);
    e((true * true) - true);
    e((true / true) - true);
    e((true + true) * true);
    e((true - true) * true);
    e((true * true) * true);
    e((true / true) * true);
    e((true + true) / true);
    e((true - true) / true);
    e((true * true) / true);
    e((true / true) / true);
    e((999 == "string") + true);
    e((true != 999) + true);
    e(("string" == true) - true);
    e((999 != "string") - true);
    e((true == 999) * true);
    e(("string" != true) * true);
    e((999 == "string") / true);
    e((true != 999) / true);
    e((999 && 999) == "string");
    e((999 || 999) == true);
    e((999 && 999) != 999);
    e((999 || 999) != "string");
    e((true < true) == true);
    e((true > true) == 999);
    e((true <= true) == "string");
    e((true >= true) == true);
    e((true < true) != 999);
    e((true > true) != "string");
    e((true <= true) != true);
    e((true >= true) != 999);
    e((true + true) == "string");
    e((true - true) == true);
    e((true * true) == 999);
    e((true / true) == "string");
    e((true + true) != true);
    e((true - true) != 999);
    e((true * true) != "string");
    e((true / true) != true);
    e((999 == "string") == true);
    e((999 != "string") == true);
    e((999 == "string") != true);
    e((999 != "string") != true);
}
//* test I/O operations
void io_f(){}
struct io_s {int s;};
void test_io(){
    struct io_s s;
    disp << io_f;
    disp << io_s;
    disp << s;
    disp << io_f();
    input >> io_f;
    input >> io_s;
    input >> s;
}
//* test function call
void func(int x){}
struct notfunc {int s;};
void test_func_void(){
    struct notfunc nf;
    notfunc();
    nf();
    func(1, 2, 3);
    func(true);
    return true;
}
int test_func_ret(){
    return;
}
int test_func_bad_ret(){
    return true;
}

