import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.
  
class TokenVal {
  // fields
    int lineNum;
    int charNum;
  // constructor
    TokenVal(int lineNum, int charNum) {
        this.lineNum = lineNum;
        this.charNum = charNum;
    }
}
  
class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int lineNum, int charNum, int intVal) {
        super(lineNum, charNum);
        this.intVal = intVal;
    }
}
  
class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int lineNum, int charNum, String idVal) {
        super(lineNum, charNum);
        this.idVal = idVal;
    }
}
  
class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int lineNum, int charNum, String strVal) {
        super(lineNum, charNum);
        this.strVal = strVal;
    }
}

// The following class is used to keep track of the character number at 
// which the current token starts on its line.
class CharNum {
    static int num = 1;
}

%%

%{
StringBuffer string = new StringBuffer();
%}

DIGIT=        [0-9]
WHITESPACE=   [\040\t]
LETTER=       [a-zA-Z]
ESCAPED=       (\\n)|(\\t)|(\\")|(\\')|(\\?)|(\\\)
NONESCAPED=    [\\][^nt\"\'\?\\\n]
STRINGCHARACTER= (\\n)|(\\t)|(\\")|(\\')|(\\?)|(\\\)|[^\n\"\\]


%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line
%state STRING

%%
<YYINITIAL> "if"      { Symbol S = new Symbol(sym.IF,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "int"     { Symbol S = new Symbol(sym.INT,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "void"    { Symbol S = new Symbol(sym.VOID,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "else"    { Symbol S = new Symbol(sym.ELSE,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL>"bool"     { Symbol S = new Symbol(sym.BOOL,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL>"true"     { Symbol S = new Symbol(sym.TRUE,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL>"disp"     { Symbol S = new Symbol(sym.DISP,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "false"   { Symbol S = new Symbol(sym.FALSE,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "while"   { Symbol S = new Symbol(sym.WHILE,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "input"   { Symbol S = new Symbol(sym.INPUT,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "return"  { Symbol S = new Symbol(sym.RETURN,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "struct"  { Symbol S = new Symbol(sym.STRUCT,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> ({LETTER}|"_")({DIGIT}|{LETTER}|"_")*   { Symbol S = new Symbol (sym.ID,
                                                        new IdTokenVal(yyline+1, CharNum.num, yytext()));
                                                      CharNum.num += yytext().length();
                                                      return S;
                                                    }

<YYINITIAL> {DIGIT}+  { // NOTE: the following computation of the integer value does
                        //       NOT check for overflow. This must be changed.
                        int val = Integer.parseInt(yytext());
                        Symbol S = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "{"       { Symbol S = new Symbol(sym.LCURLY,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "}"       { Symbol S = new Symbol(sym.RCURLY,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "("       { Symbol S = new Symbol(sym.LPAREN,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> ")"       { Symbol S = new Symbol(sym.RPAREN,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> ";"       { Symbol S = new Symbol(sym.SEMICOLON,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> ","       { Symbol S = new Symbol(sym.COMMA,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "."       { Symbol S = new Symbol(sym.DOT,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "<<"      { Symbol S = new Symbol(sym.WRITE,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> ">>"      { Symbol S = new Symbol(sym.READ,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "++"      { Symbol S = new Symbol(sym.PLUSPLUS,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "--"      { Symbol S = new Symbol(sym.MINUSMINUS,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "+"       { Symbol S = new Symbol(sym.PLUS,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "-"       { Symbol S = new Symbol(sym.MINUS,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "*"       { Symbol S = new Symbol(sym.TIMES,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "/"      { Symbol S = new Symbol(sym.DIVIDE,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "!"       { Symbol S = new Symbol(sym.NOT,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "&&"      { Symbol S = new Symbol(sym.AND,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "||"      { Symbol S = new Symbol(sym.OR,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "=="      { Symbol S = new Symbol(sym.EQUALS,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "!="     { Symbol S = new Symbol(sym.NOTEQUALS,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "<"       { Symbol S = new Symbol(sym.LESS,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> ">"       { Symbol S = new Symbol(sym.GREATER,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "<="      { Symbol S = new Symbol(sym.LESSEQ,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                        }

<YYINITIAL> ">="      { Symbol S = new Symbol(sym.GREATEREQ,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> "="       { Symbol S = new Symbol(sym.ASSIGN,
                          new TokenVal(yyline+1, CharNum.num));
                        CharNum.num += yytext().length();
                        return S;
                      }

<YYINITIAL> {WHITESPACE}+  { CharNum.num += yytext().length(); }
<YYINITIAL> \n             { CharNum.num = 1; }


<YYINITIAL> ("//*"|"%")[^\n]*  { CharNum.num += yytext().length(); }


<YYINITIAL> [\"]        { string.setLength(0); 
                        string.append('\"'); 
                        yybegin(STRING);
                      }


<STRING> {STRINGCHARACTER}*[\"]  {  string.append(yytext());
                                  Symbol S = new Symbol(sym.STRINGLITERAL,
                                    new StrLitTokenVal(yyline+1, CharNum.num, string.toString()));
                                  CharNum.num += yytext().length() + 1;
                                  yybegin(YYINITIAL); 
                                  return S;
                                }
<STRING> {STRINGCHARACTER}*[\n]  {  ErrMsg.fatal(yyline+1, CharNum.num,
                                    "ignoring unterminated string literal");
                                  CharNum.num = 1;
                                  yybegin(YYINITIAL);
                                }

<STRING> ({STRINGCHARACTER}|{NONESCAPED})*[\\][\n]  { ErrMsg.fatal(yyline+1, CharNum.num,
                                                      "ignoring unterminated string literal with bad escaped character");
                                                    CharNum.num = 1;
                                                    yybegin(YYINITIAL); 
                                                  }
<STRING> {STRINGCHARACTER}*{NONESCAPED}({STRINGCHARACTER}|{NONESCAPED})*[\n]  { ErrMsg.fatal(yyline+1, CharNum.num,
                                                                                "ignoring unterminated string literal with bad escaped character");
                                                                              CharNum.num = 1;
                                                                              yybegin(YYINITIAL); 
                                                                            }
<STRING> {STRINGCHARACTER}*{NONESCAPED}({STRINGCHARACTER}|{NONESCAPED})*    { ErrMsg.fatal(yyline+1, CharNum.num,
                                                                                "ignoring unterminated string literal with bad escaped character");
                                                                              CharNum.num = 1;
                                                                              yybegin(YYINITIAL); 
                                                                            }

<STRING> {STRINGCHARACTER}*{NONESCAPED}({STRINGCHARACTER}|{NONESCAPED})*[\"]  { ErrMsg.fatal(yyline+1, CharNum.num,
                                                                                "ignoring string literal with bad escaped character");
                                                                              CharNum.num += yytext().length() + 1;
                                                                              yybegin(YYINITIAL); 
                                                                            }


<STRING> {STRINGCHARACTER}*    {  ErrMsg.fatal(yyline+1, CharNum.num,
                                    "ignoring unterminated string literal");
                                  CharNum.num = 1;
                                  yybegin(YYINITIAL); }


<YYINITIAL> .         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
                        CharNum.num++;
                      }
