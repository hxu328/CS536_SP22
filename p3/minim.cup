/**********************************************************************
 Java CUP specification for a parser for minim programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                INPUT;
terminal                DISP;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;
terminal                UMINUS;

/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 * TODO: //
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal LinkedList       structBody;
non terminal StructDeclNode   structDecl;
non terminal FnDeclNode       fnDecl;
non terminal CallExpNode      fncall;
non terminal LinkedList       formals;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       varDeclList;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal AssignExpNode    assignExp;
non terminal ExpNode          loc;
non terminal ExpNode          exp;
non terminal ExpNode          term;
non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal LinkedList       actualList;

/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc EQUALS, NOTEQUALS;
precedence left LESS, LESSEQ, GREATER, GREATEREQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right NOT, UMINUS;
precedence left DOT;

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | fnDecl:f
                {: RESULT = f;
                :}
                | structDecl:s
                {: RESULT = s;
                :}
                ;

varDeclList     ::= varDeclList:vl varDecl:v
                {: vl.addLast(v);
                   RESULT = vl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<VarDeclNode>();
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:i1 id:i2 SEMICOLON
                {: RESULT = new VarDeclNode(new StructNode(i1), i2, 0);
                :}
                ;

fnDecl          ::= type:t id:i formals:fm fnBody:fb
                {: RESULT = new FnDeclNode(t, i, new FormalsListNode(fm), fb);
                :}
                ;

fnBody          ::= LCURLY varDeclList:v stmtList:s RCURLY
                {: RESULT = new FnBodyNode(new DeclListNode(v), new StmtListNode(s));
                :}
                ;

fncall          ::= id:i LPAREN RPAREN
                {: RESULT = new CallExpNode(i);
                :}
                | id:i LPAREN actualList:al RPAREN
                {: RESULT = new CallExpNode(i, new ExpListNode(al));
                :}
                ;

actualList      ::= exp:ex
                {: RESULT = new LinkedList<ExpNode>(Arrays.asList(ex));
                :}
                | actualList:al COMMA exp:ex
                {: al.addLast(ex);
                   RESULT = al;
                :}
                ;

structDecl      ::= STRUCT id:i LCURLY structBody:sb RCURLY SEMICOLON
                {: RESULT = new StructDeclNode(i, new DeclListNode(sb));
                :}
                ;
  
structBody      ::= structBody:sb varDecl:vd
                {: sb.addLast(vd);
                   RESULT = sb;
                :}
                | varDecl:vd
                {: RESULT = new LinkedList<DeclNode>(Arrays.asList(vd));
                :}
                ;

formals         ::= LPAREN RPAREN
                {: RESULT = new LinkedList<FormalDeclNode>();
                :}
                | LPAREN formalsList:f RPAREN
                {: RESULT = f;
                :}
                ;

formalsList     ::= formalDecl:f
                {: RESULT = new LinkedList<FormalDeclNode>(Arrays.asList(f));
                :}
                | formalDecl:f COMMA formalsList:fl
                {: fl.addFirst(f);
                   RESULT = fl;
                :}
                ;

formalDecl      ::= type:t id:i
                {: RESULT = new FormalDeclNode(t, i);
                :}
                ;

stmtList        ::= /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                | stmtList:sl stmt:s
                {:
                 sl.add(s);
                 RESULT = sl;
                :}
                ;

stmt            ::= assignExp:a SEMICOLON
                {: RESULT = new AssignStmtNode(a);
                :}
                | loc:l PLUSPLUS SEMICOLON
                {: RESULT = new PostIncStmtNode(l);
                :}
                | loc:l MINUSMINUS SEMICOLON
                {: RESULT = new PostDecStmtNode(l);
                :}
                | INPUT READ loc:l SEMICOLON
                {: RESULT = new ReadStmtNode(l);
                :}
                | DISP WRITE exp:ex SEMICOLON
                {: RESULT = new WriteStmtNode(ex);
                :}
                | IF exp:ex LCURLY varDeclList:vl stmtList:sl RCURLY
                {: RESULT = new IfStmtNode(ex, new DeclListNode(vl), new StmtListNode(sl));
                :}
                | IF exp:ex LCURLY varDeclList:vl1 stmtList:sl1 RCURLY ELSE LCURLY varDeclList:vl2 stmtList:sl2 RCURLY
                {: RESULT = new IfElseStmtNode(ex, new DeclListNode(vl1), new StmtListNode(sl1), new DeclListNode(vl2), new StmtListNode(sl2));
                :}
                | WHILE exp:ex LCURLY varDeclList:vl stmtList:sl RCURLY
                {: RESULT = new WhileStmtNode(ex, new DeclListNode(vl), new StmtListNode(sl));
                :}
                | RETURN exp:ex SEMICOLON
                {: RESULT = new ReturnStmtNode(ex);
                :}
                | RETURN SEMICOLON
                {: RESULT = new ReturnStmtNode(null);
                :}
                | fncall:fc SEMICOLON
                {: RESULT = new CallStmtNode(fc);
                :}
                ;


type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;

exp             ::= assignExp:ae
                {: RESULT = ae;
                :}
                | exp:ex1 PLUS exp:ex2 
                {: RESULT = new PlusNode(ex1, ex2);
                :}
                | exp:ex1 MINUS exp:ex2
                {: RESULT = new MinusNode(ex1, ex2);
                :}
                | exp:ex1 TIMES exp:ex2
                {: RESULT = new TimesNode(ex1, ex2);
                :}
                | exp:ex1 DIVIDE exp:ex2
                {: RESULT = new DivideNode(ex1, ex2);
                :}
                | NOT exp:ex
                {: RESULT = new NotNode(ex);
                :}
                | exp:ex1 AND exp:ex2
                {: RESULT = new AndNode(ex1, ex2);
                :}
                | exp:ex1 OR exp:ex2
                {: RESULT = new OrNode(ex1, ex2);
                :}
                | exp:ex1 EQUALS exp:ex2
                {: RESULT = new EqualsNode(ex1, ex2);
                :}
                | exp:ex1 NOTEQUALS exp:ex2
                {: RESULT = new NotEqualsNode(ex1, ex2);
                :}
                | exp:ex1 LESS exp:ex2
                {: RESULT = new LessNode(ex1, ex2);
                :}
                | exp:ex1 GREATER exp:ex2
                {: RESULT = new GreaterNode(ex1, ex2);
                :}
                | exp:ex1 LESSEQ exp:ex2
                {: RESULT = new LessEqNode(ex1, ex2);
                :}
                | exp:ex1 GREATEREQ exp:ex2
                {: RESULT = new GreaterEqNode(ex1, ex2);
                :} %prec UMINUS
                | MINUS term:t
                {: RESULT = new UnaryMinusNode(t);
                :}
                | term:t
                {: RESULT = t;
                :}
                ;

term            ::= loc:l
                {: RESULT = l;
                :}
                | INTLITERAL:i
                {: RESULT = new IntLitNode(i.lineNum, i.charNum, i.intVal);
                :}
                | STRINGLITERAL:s
                {: RESULT = new StringLitNode(s.lineNum, s.charNum, s.strVal);
                :}
                | TRUE:t
                {: RESULT = new TrueNode(t.lineNum, t.charNum);
                :}
                | FALSE:f
                {: RESULT = new FalseNode(f.lineNum, f.charNum);
                :}
                | LPAREN exp:ex RPAREN
                {: RESULT = ex;
                :}
                | fncall:fc
                {: RESULT = fc;
                :}
                ;

assignExp       ::= loc:l ASSIGN exp:ex
                {: RESULT = new AssignExpNode(l, ex);
                :}
                ;

loc             ::= id:i
                {: RESULT = i;
                :}
                | loc:l DOT id:i
                {: RESULT = new DotAccessExpNode(l, i);
                :}
                ;